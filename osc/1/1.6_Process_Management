파일의 상태를 화면에 출력하는 프로세스를 생각하자.
input으로 파일 이름을 입력받으면, 프로세스는 터미널에 원하는 정보를 출력하기 위해 
적절한 명령과 system calls를 실행할 것이다. 프로세스가 종료되면 os는 재사용가능한
resources(cpu time, memory, files, i/o devices)를 되찾을 것이다.

프로그램은 프로세스가 아닌 파일이다.
프로그램은 passive entity이고, 프로세스는 active entity이다.

single-threaded process 는 다음 실행 명령을 명시하고 있는 하나의 program counter를 가지고 있다.
이런 하나의 프로세스의 실행은 순차적이어야 한다.

cpu는 프로세스가 완료될 때 까지 프로세스의 명령을 하나씩 실행한다.
따라서 두 개의 프로세스가 하나의 프로그램에 관련되어 있더라도 그들은 두 개의 실행 sequence로 취급된다.

multithreaded process는 다수의 program counter를 가지고 있으며, 
각각은 주어진 하나의 thread에게 다음 실행 명령을 알려준다.

프로세스는 시스템에서 작업의 단위이다. 
시스템은 프로세스의 집합으로 구성되어 있으며, 일부는 os프로세스이고 나머지는 사용자 프로세스이다.

os는 프로세스 관리에 대해 다음의 역할을 수행해야 한다.
 - cpu에서 process와 thread 스케쥴링
 - 유저와 시스템 프로세스 생성과 제거
 - 프로세스를 연기하고 재개
 - 프로세스 동기화에 대한 메커니즘 제공
 - 프로세스 통신에 대한 메커니즘 제공

