메인 메모리는 array of bytes로 이루어져 있고 cpu와 i/o장치로부터 공유받은,
	데이터에 매우 빨리 접근 가능한 장치이다.

central processor는 
	instruction-fetch cycle동안 메모리로부터 명령을 읽는다.
	data-fetch cycle동안 메인메모리의 데이터를 읽고 쓴다.

cpu에서 디스크의 데이터를 처리하기 위해서는 cpu의 i/o호출에 의해 데이터가 메인 메모리에 전달되어야 한다.
또한, cpu가 명령을 실행시키기 위해서는 명령이 메모리에 전달되어 있어야 한다.

프로그램은 실행되기 위해서 절대주소에 매핑되어야 하고 메모리에 적재되어야 한다.
프로그램이 실행될 때 절대주소에 의한 메모리로부터 프로그램 명령과 데이터를 불러들인다.
프로그램이 종료되면 해당 메모리는 다음 프로그램이 load 되고 실행될 수 있도록 이용가능한 공간으로 선언된다.

유저에 대한 컴퓨터의 반응속도와 cpu의 사용을 향상시키기 위해 일반 컴퓨터는 메모리 관리를 필요로하는
프로그램들을 메모리에 유지(load를 말하는건가?)해야 한다.

많은 종류의 메모리 관리 스키마가 사용되고 있다.
스키마는 다양한 접근과 상황에 따른 알고리즘의 효율성을 반영한다.
각각의 알고리즘은 하드웨어의 지원을 필요로 한다.

특정 시스템을 위한 메모리 관리 스키마를 선택하는데 있어 많은 요소를 고려해야한다.
특히, 시스템의 하드웨어 디자인을 고려해야한다.

os는 메모리 관리에 있어 다음의 책임이 있다.
 - 현재 메모리의 어느 부분이 사용되고 있는지, 누가 사용하고 있는지 파악할 것
 - 어떤 프로세스와 데이터가 메모리에 들어가고 나오는지 결정할 것
 - 필요에 의한 메모리 할당과 반환

