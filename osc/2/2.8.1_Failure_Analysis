프로세스가 실패하면 os는 에러의 정보를 로그파일에 저장한다.
os는 실패한 프로세스의 메모리를 나중에 분석하기 위해서 core dump에 저장시킨다.
실행중인 프로그램과 코어 덤프는 프로그래머가 코드와 프로세스를 살펴볼 수 있도록 하는 
디버거를 통해 조사될 수 있다.

user-level 프로세스를 디버깅하는 것은 어려운 일이다. 
kernel 디버깅의 경우 
	하드웨어를 조작하는 커널의 복잡성과 크기,
	user-level의 디버깅 툴의 부족으로 더 복잡하다.
커널에서의 프로세스 실패를 crash라고 부른다.
크래시가 발생하면 에러에 대한 로그 파일을 생성하고 crash dump에 메모리의 상태를 저장한다.

os디버깅과 프로세스 디버깅은 각각의 task가 성질이 다르기 때문에 다른 기술과 툴을 사용한다.
파일 시스템을 사용하는 커널의 오류로 커널의 정보를 파일 시스템의 파일에 저장하는 것은 문제가 있다.
일반적인 기술은 파일 시스템을 사용하지 않는 디스크의 부분에 커널의 메모리 상태를 저장하는 것이다.
커널이 회복할수 없는 오류를 발견하면 모든 메모리의 내용을,
	최소한, 시스템 메모리에서 커널이 소유하고 있는 부분의 내용을 위의 디스크 영역에 write한다.
시스템이 재시작되면 한 프로세스는 이 영역의 데이터를 분석하기 위해서 
	데이터를 모으으로 파일 시스템 내의 crash dump file을 작성한다.
이 작업은 user-level 프로세스를 디버깅하는 것이 필요하지 않다.
